// <auto-generated />
using System;
using FinApp.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinApp.Infrastructure.Migrations.FinanceDb
{
    [DbContext(typeof(FinanceDbContext))]
    [Migration("20250606190042_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FinApp.Domain.Aggregates.AccountAggregate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("FinApp.Domain.Entities.Budget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.ToTable("Budgets", (string)null);
                });

            modelBuilder.Entity("FinApp.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("FinApp.Domain.Entities.CategoryTransaction", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId", "TransactionId");

                    b.HasIndex("TransactionId");

                    b.ToTable("CategoryTransactions", (string)null);
                });

            modelBuilder.Entity("FinApp.Domain.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountAggregateId")
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountAggregateId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("FinApp.Domain.Aggregates.AccountAggregate", b =>
                {
                    b.OwnsOne("FinApp.Domain.ValueObjects.Balance", "Balance", b1 =>
                        {
                            b1.Property<int>("AccountAggregateId")
                                .HasColumnType("int");

                            b1.Property<double>("Value")
                                .HasColumnType("float")
                                .HasColumnName("Balance");

                            b1.HasKey("AccountAggregateId");

                            b1.ToTable("Accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountAggregateId");
                        });

                    b.Navigation("Balance")
                        .IsRequired();
                });

            modelBuilder.Entity("FinApp.Domain.Entities.Budget", b =>
                {
                    b.HasOne("FinApp.Domain.Entities.Category", "Category")
                        .WithOne("Budget")
                        .HasForeignKey("FinApp.Domain.Entities.Budget", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FinApp.Domain.ValueObjects.Amount", "Amount", b1 =>
                        {
                            b1.Property<int>("BudgetId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Amount");

                            b1.HasKey("BudgetId");

                            b1.ToTable("Budgets");

                            b1.WithOwner()
                                .HasForeignKey("BudgetId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FinApp.Domain.Entities.Category", b =>
                {
                    b.OwnsOne("FinApp.Domain.Aggregates.ColorHex", "ColorHex", b1 =>
                        {
                            b1.Property<int>("CategoryId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(7)
                                .HasColumnType("nvarchar(7)")
                                .HasColumnName("ColorHex");

                            b1.HasKey("CategoryId");

                            b1.ToTable("Categories");

                            b1.WithOwner()
                                .HasForeignKey("CategoryId");
                        });

                    b.Navigation("ColorHex")
                        .IsRequired();
                });

            modelBuilder.Entity("FinApp.Domain.Entities.CategoryTransaction", b =>
                {
                    b.HasOne("FinApp.Domain.Entities.Category", "Category")
                        .WithMany("CategoryTransactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinApp.Domain.Entities.Transaction", "Transaction")
                        .WithMany("CategoryTransaction")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("FinApp.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("FinApp.Domain.Aggregates.AccountAggregate", null)
                        .WithMany("Transactions")
                        .HasForeignKey("AccountAggregateId");

                    b.OwnsOne("FinApp.Domain.ValueObjects.Amount", "Amount", b1 =>
                        {
                            b1.Property<int>("TransactionId")
                                .HasColumnType("int");

                            b1.Property<double>("Value")
                                .HasColumnType("float")
                                .HasColumnName("Amount");

                            b1.HasKey("TransactionId");

                            b1.ToTable("Transactions");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();
                });

            modelBuilder.Entity("FinApp.Domain.Aggregates.AccountAggregate", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("FinApp.Domain.Entities.Category", b =>
                {
                    b.Navigation("Budget")
                        .IsRequired();

                    b.Navigation("CategoryTransactions");
                });

            modelBuilder.Entity("FinApp.Domain.Entities.Transaction", b =>
                {
                    b.Navigation("CategoryTransaction");
                });
#pragma warning restore 612, 618
        }
    }
}
